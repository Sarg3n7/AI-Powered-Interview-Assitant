export class ExportUtils {
  static exportToJSON(candidate, session) {
    const exportData = {
      candidate: {
        name: candidate.name,
        email: candidate.email,
        phone: candidate.phone,
        finalScore: candidate.finalScore,
        status: candidate.status,
        interviewDate: new Date(candidate.createdAt).toISOString(),
        completedDate: candidate.completedAt ? new Date(candidate.completedAt).toISOString() : null,
      },
      interview: {
        sessionId: session.id,
        totalQuestions: session.questions.length,
        questions: session.questions.map((q, index) => ({
          questionNumber: index + 1,
          question: q.text,
          difficulty: q.difficulty,
          timeLimit: q.timeLimit,
          answer: q.answer || 'No answer provided',
          score: q.score || 0,
          maxScore: 15,
          autoSubmitted: q.autoSubmitted || false,
          rubric: q.rubric || null,
        })),
        summary: {
          totalScore: session.questions.reduce((sum, q) => sum + (q.score || 0), 0),
          maxPossibleScore: session.questions.length * 15,
          averageScore: session.questions.reduce((sum, q) => sum + (q.score || 0), 0) / session.questions.length,
          completionRate: (session.questions.filter(q => q.answer).length / session.questions.length) * 100,
        }
      },
      aiSummary: candidate.aiSummary,
      exportedAt: new Date().toISOString(),
      exportedBy: 'Swipe AI Interview Assistant',
    };

    return exportData;
  }

  static downloadJSON(data, filename) {
    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }

  static generateTranscriptText(candidate, session) {
    const lines = [];
    
    lines.push('='.repeat(60));
    lines.push('SWIPE AI INTERVIEW ASSISTANT - INTERVIEW TRANSCRIPT');
    lines.push('='.repeat(60));
    lines.push('');
    
    // Candidate Information
    lines.push('CANDIDATE INFORMATION');
    lines.push('-'.repeat(30));
    lines.push(`Name: ${candidate.name}`);
    lines.push(`Email: ${candidate.email}`);
    lines.push(`Phone: ${candidate.phone}`);
    lines.push(`Interview Date: ${new Date(candidate.createdAt).toLocaleString()}`);
    lines.push(`Final Score: ${candidate.finalScore || 'Not scored'}/100`);
    lines.push(`Status: ${candidate.status}`);
    lines.push('');
    
    // Interview Summary
    const totalScore = session.questions.reduce((sum, q) => sum + (q.score || 0), 0);
    const maxScore = session.questions.length * 15;
    const completedQuestions = session.questions.filter(q => q.answer).length;
    
    lines.push('INTERVIEW SUMMARY');
    lines.push('-'.repeat(30));
    lines.push(`Total Questions: ${session.questions.length}`);
    lines.push(`Completed Questions: ${completedQuestions}`);
    lines.push(`Total Score: ${totalScore}/${maxScore}`);
    lines.push(`Average Score per Question: ${(totalScore / session.questions.length).toFixed(1)}/15`);
    lines.push(`Completion Rate: ${((completedQuestions / session.questions.length) * 100).toFixed(1)}%`);
    lines.push('');
    
    // Questions and Answers
    lines.push('QUESTIONS AND ANSWERS');
    lines.push('-'.repeat(30));
    
    session.questions.forEach((question, index) => {
      lines.push('');
      lines.push(`QUESTION ${index + 1} [${question.difficulty}] - ${question.timeLimit}s`);
      lines.push('â”€'.repeat(40));
      lines.push(question.text);
      lines.push('');
      lines.push('ANSWER:');
      lines.push(question.answer || 'No answer provided');
      lines.push('');
      lines.push(`SCORE: ${question.score || 0}/15`);
      if (question.autoSubmitted) {
        lines.push('NOTE: Auto-submitted due to timeout');
      }
      lines.push('');
    });
    
    // AI Summary
    if (candidate.aiSummary) {
      lines.push('AI SUMMARY');
      lines.push('-'.repeat(30));
      lines.push(candidate.aiSummary);
      lines.push('');
    }
    
    lines.push('='.repeat(60));
    lines.push(`Generated on: ${new Date().toLocaleString()}`);
    lines.push('Generated by: Swipe AI Interview Assistant');
    lines.push('='.repeat(60));
    
    return lines.join('\n');
  }

  static downloadText(content, filename) {
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }

  static exportCandidate(candidate, session, format = 'json') {
    const timestamp = new Date().toISOString().split('T')[0];
    const safeName = candidate.name.replace(/[^a-zA-Z0-9]/g, '_');
    
    if (format === 'json') {
      const data = this.exportToJSON(candidate, session);
      const filename = `${safeName}_interview_${timestamp}.json`;
      this.downloadJSON(data, filename);
    } else if (format === 'txt') {
      const content = this.generateTranscriptText(candidate, session);
      const filename = `${safeName}_interview_${timestamp}.txt`;
      this.downloadText(content, filename);
    }
  }
}